# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at
  ## most metric_batch_size metrics.
  metric_batch_size = 1000
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default, precision will be set to the same timestamp order as the
  ## collection interval, with the maximum being 1s.
  ## Precision will NOT be used for service inputs, such as logparser and statsd.
  ## Valid values are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""
  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://influxdb:8086"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "$INFLUXDB_DATABASE" # required

  ## Retention policy to write to. Empty string writes to the default rp.
  retention_policy = ""
  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
  write_consistency = "any"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "5s"
  username = "$INFLUXDB_ADMIN_USER"
  password = "$INFLUXDB_ADMIN_PASSWORD"


# Configuration for AWS CloudWatch output.
#[[outputs.cloudwatch]]
#  ## Amazon REGION
#  region = "$AWS_REGION"
#  ## Amazon Credentials
#  ## Credentials are loaded in the following order
#  ## 1) Assumed credentials via STS if role_arn is specified
#  ## 2) explicit credentials from 'access_key' and 'secret_key'
#  ## 3) shared profile from 'profile'
#  ## 4) environment variables
#  ## 5) shared credentials file
#  ## 6) EC2 Instance Profile
#  access_key = "$AWS_KEY_ID"
#  secret_key = "$AWS_SECRET_KEY"
#  #token = ""
#  #role_arn = ""
#  #profile = ""
#  #shared_credential_file = ""
#  ## Namespace for the CloudWatch MetricDatums
#  namespace = 'InfluxData/Telegraf'

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## Comment this line if you want the raw CPU time metrics
  fielddrop = ["time_*"]


# Read metrics about disk usage by mount point
[[inputs.disk]]

# Read metrics about disk IO by device
[[inputs.diskio]]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]

# Read metrics about memory usage
[[inputs.mem]]

# Get the number of processes and group them by status
[[inputs.processes]]

# Read metrics about swap memory usage
[[inputs.swap]]

# Read metrics about system load & uptime
[[inputs.system]]

# # Read metrics about docker containers
[[inputs.docker]]
  ##   To use TCP, set endpoint = "tcp://[ip]:[port]"
  ##   To use environment variables (ie, docker-machine), set endpoint = "ENV"
  endpoint = "unix:///tmp/docker.sock"
  ## Only collect metrics for these containers, collect all if empty
  container_names = []
  ## Timeout for docker list, info, and stats commands
  timeout = "5s"

# HTTP/HTTPS request given an address a method and a timeout
[[inputs.http_response]]
  ## Server address (default http://localhost)
  address = "$RESPONSE_ENDPOINT"
  ## Set response_timeout (default 5 seconds)
  response_timeout = "5s"
  ## HTTP Request Method
  method = "GET"
  ## Whether to follow redirects from the server (defaults to false)
  follow_redirects = true


# Read InfluxDB-formatted JSON metrics from one or more HTTP endpoints
[[inputs.influxdb]]
  name_override = "core_runtime"
  fieldpass = ["mem*", "cpu*"]
  tagexclude = ["url"]
  urls = [
    "http://spike:13400/debug/vars",
  ]
  [inputs.influxdb.tags]
    service = "spike"

[[inputs.influxdb]]
  name_override = "core_runtime"
  fieldpass = ["mem*", "cpu*"]
  tagexclude = ["url"]
  urls = [
    "http://ein:13100/debug/vars",
  ]
  [inputs.influxdb.tags]
    service = "ein"

[[inputs.influxdb]]
  name_override = "core_runtime"
  fieldpass = ["mem*", "cpu*"]
  tagexclude = ["url"]
  urls = [
    "http://hermes:13200/debug/vars",
  ]
  [inputs.influxdb.tags]
    service = "hermes"

[[inputs.influxdb]]
  name_override = "core_runtime"
  fieldpass = ["mem*", "cpu*"]
  tagexclude = ["url"]
  urls = [
    "http://julia:13201/debug/vars",
  ]
  [inputs.influxdb.tags]
    service = "julia"

[[inputs.influxdb]]
  name_override = "core_runtime"
  fieldpass = ["mem*", "cpu*"]
  tagexclude = ["url"]
  urls = [
    "http://rutgers-cm:13302/debug/vars",
  ]
  [inputs.influxdb.tags]
    service = "rutgers-cm"

[[inputs.influxdb]]
  name_override = "core_runtime"
  fieldpass = ["mem*", "cpu*"]
  tagexclude = ["url"]
  urls = [
    "http://rutgers-nk:13301/debug/vars",
  ]
  [inputs.influxdb.tags]
    service = "rutgers-nk"

[[inputs.influxdb]]
  name_override = "core_runtime"
  fieldpass = ["mem*", "cpu*"]
  tagexclude = ["url"]
  urls = [
    "http://rutgers-nb:13303/debug/vars",
  ]
  [inputs.influxdb.tags]
    service = "rutgers-nb"

# Read TCP metrics such as established, time wait and sockets counts.
[[inputs.netstat]]


# Read Nginx's basic status information (ngx_http_stub_status_module)
[[inputs.nginx]]
  ## An array of Nginx stub_status URI to gather stats.
  urls = ["http://nginx:8090/nginx_status"]


# Read metrics from one or many postgresql servers
[[inputs.postgresql]]
  address = "host=postgresql user=$POSTGRES_USER password=$POSTGRES_PASSWORD sslmode=disable fallback_application_name=telegraf"

  ## A list of databases to pull metrics about. If not specified, metrics for all
  ## databases are gathered.
  databases = ["$POSTGRES_DB"]

# Read metrics from one or many redis servers
[[inputs.redis]]
  servers = ["tcp://redis:6379"]