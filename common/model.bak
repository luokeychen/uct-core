// Code generated by protoc-gen-go.

type University struct {
	Id                 int64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	Name               string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" db:"name"`
	Abbr               string          `protobuf:"bytes,3,opt,name=abbr" json:"abbr,omitempty" db:"abbr"`
	HomePage           string          `protobuf:"bytes,4,opt,name=home_page,json=homePage" json:"home_page,omitempty" db:"home_page"`
	RegistrationPage   string          `protobuf:"bytes,5,opt,name=registration_page,json=registrationPage" json:"registration_page,omitempty" db:"registration_page"`
	MainColor          string          `protobuf:"bytes,6,opt,name=main_color,json=mainColor" json:"main_color,omitempty" db:"main_color"`
	AccentColor        string          `protobuf:"bytes,7,opt,name=accent_color,json=accentColor" json:"accent_color,omitempty" db:"accent_color"`
	TopicName          string          `protobuf:"bytes,8,opt,name=topic_name,json=topicName" json:"topic_name,omitempty" db:"topic_name"`
	Subjects           []*Subject      `protobuf:"bytes,9,rep,name=subjects" json:"subjects,omitempty"`
	AvailableSemesters []*Semester     `protobuf:"bytes,10,rep,name=available_semesters,json=availableSemesters" json:"available_semesters,omitempty"`
	Registrations      []*Registration `protobuf:"bytes,11,rep,name=registrations" json:"registrations,omitempty"`
	Metatdata          []*Metadata     `protobuf:"bytes,12,rep,name=metatdata" json:"metatdata,omitempty"`
}

type Subject struct {
	Id           int64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	UniversityId int64       `protobuf:"varint,2,opt,name=university_id,json=universityId" json:"university_id,omitempty" db:"university_id"`
	Name         string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty" db:"name"`
	Number       string      `protobuf:"bytes,4,opt,name=number" json:"number,omitempty" db:"number"`
	Season       string      `protobuf:"bytes,5,opt,name=season" json:"season,omitempty" db:"season"`
	Year         int32       `protobuf:"varint,6,opt,name=year" json:"year,omitempty" db:"year"`
	Hash         string      `protobuf:"bytes,7,opt,name=hash" json:"hash,omitempty" db:"hash"`
	TopicName    string      `protobuf:"bytes,8,opt,name=topic_name,json=topicName" json:"topic_name,omitempty" db:"topic_name"`
	Courses      []*Course   `protobuf:"bytes,9,rep,name=courses" json:"courses,omitempty"`
	Metadata     []*Metadata `protobuf:"bytes,10,rep,name=metadata" json:"metadata,omitempty"`
}

type Course struct {
	Id        int64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	SubjectId int64       `protobuf:"varint,2,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty" db:"subject_id"`
	Name      string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty" db:"name"`
	Number    string      `protobuf:"bytes,4,opt,name=number" json:"number,omitempty" db:"number"`
	Synopsis  string      `protobuf:"bytes,5,opt,name=synopsis" json:"synopsis,omitempty" db:"synopsis"`
	Hash      string      `protobuf:"bytes,6,opt,name=hash" json:"hash,omitempty" db:"hash"`
	TopicName string      `protobuf:"bytes,7,opt,name=topic_name,json=topicName" json:"topic_name,omitempty" db:"topic_name"`
	Sections  []*Section  `protobuf:"bytes,9,rep,name=sections" json:"sections,omitempty"`
	Metadata  []*Metadata `protobuf:"bytes,10,rep,name=metadata" json:"metadata,omitempty"`
}

type Section struct {
	Id          int64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	CourseId    int64         `protobuf:"varint,2,opt,name=course_id,json=courseId" json:"course_id,omitempty" db:"course_id"`
	Number      string        `protobuf:"bytes,3,opt,name=number" json:"number,omitempty" db:"number"`
	CallNumber  string        `protobuf:"bytes,4,opt,name=call_number,json=callNumber" json:"call_number,omitempty" db:"call_number"`
	Max         string        `protobuf:"bytes,5,opt,name=max" json:"max,omitempty" db:"max"`
	Now         string        `protobuf:"bytes,6,opt,name=now" json:"now,omitempty" db:"now"`
	Status      string        `protobuf:"bytes,7,opt,name=status" json:"status,omitempty" db:"status"`
	Credits     string        `protobuf:"bytes,8,opt,name=credits" json:"credits,omitempty" db:"credits"`
	TopicName   string        `protobuf:"bytes,9,opt,name=topic_name,json=topicName" json:"topic_name,omitempty" db:"topic_name"`
	Meetings    []*Meeting    `protobuf:"bytes,10,rep,name=meetings" json:"meetings,omitempty"`
	Instructors []*Instructor `protobuf:"bytes,11,rep,name=instructors" json:"instructors,omitempty"`
	Books       []*Book       `protobuf:"bytes,12,rep,name=books" json:"books,omitempty"`
	Metadata    []*Metadata   `protobuf:"bytes,13,rep,name=metadata" json:"metadata,omitempty"`
}

type Meeting struct {
	Id        int64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	SectionId int64       `protobuf:"varint,2,opt,name=section_id,json=sectionId" json:"section_id,omitempty" db:"section_id"`
	Room      string      `protobuf:"bytes,3,opt,name=room" json:"room,omitempty" db:"room"`
	Day       string      `protobuf:"bytes,4,opt,name=day" json:"day,omitempty" db:"day"`
	StartTime string      `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty" db:"start_time"`
	EndTime   string      `protobuf:"bytes,6,opt,name=end_time,json=endTime" json:"end_time,omitempty" db:"end_time"`
	Index     string      `protobuf:"bytes,7,opt,name=index" json:"index,omitempty" db:"index"`
	Metadata  []*Metadata `protobuf:"bytes,8,rep,name=metadata" json:"metadata,omitempty"`
}

type Instructor struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	SectionId int64  `protobuf:"varint,2,opt,name=section_id,json=sectionId" json:"section_id,omitempty" db:"section_id"`
	Name      string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty" db:"name"`
}

type Book struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	SectionId int64  `protobuf:"varint,2,opt,name=section_id,json=sectionId" json:"section_id,omitempty" db:"section_id"`
	Title     string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty" db:"title"`
	Url       string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty" db:"url"`
}

type Metadata struct {
	Id           int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	UniversityId int64  `protobuf:"varint,2,opt,name=university_id,json=universityId" json:"university_id,omitempty" db:"university_id"`
	SubjectId    int64  `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty" db:"subject_id"`
	CourseId     int64  `protobuf:"varint,4,opt,name=course_id,json=courseId" json:"course_id,omitempty" db:"course_id"`
	SectionId    int64  `protobuf:"varint,5,opt,name=section_id,json=sectionId" json:"section_id,omitempty" db:"section_id"`
	MeetingId    int64  `protobuf:"varint,6,opt,name=meeting_id,json=meetingId" json:"meeting_id,omitempty" db:"meeting_id"`
	Title        string `protobuf:"bytes,7,opt,name=title" json:"title,omitempty" db:"title"`
	Content          string `protobuf:"bytes,8,opt,name=content" json:"content,omitempty" db:"content"`
}

type Registration struct {
	Id           int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty" db:"id"`
	UniversityId int64  `protobuf:"varint,2,opt,name=university_id,json=universityId" json:"university_id,omitempty" db:"university_id"`
	Period       string `protobuf:"bytes,3,opt,name=period" json:"period,omitempty" db:"period"`
	PeriodDate   string `protobuf:"bytes,4,opt,name=period_date,json=periodDate" json:"period_date,omitempty" db:"period_date"`
}

type Semester struct {
	Year   int32  `protobuf:"varint,1,opt,name=year" json:"year,omitempty" db:"year"`
	Season Season `protobuf:"varint,2,opt,name=season,enum=Season" json:"season,omitempty" db:"season"`
}

func init() {
	proto.RegisterType((*University)(nil), "University")
	proto.RegisterType((*Subject)(nil), "Subject")
	proto.RegisterType((*Course)(nil), "Course")
	proto.RegisterType((*Section)(nil), "Section")
	proto.RegisterType((*Meeting)(nil), "Meeting")
	proto.RegisterType((*Instructor)(nil), "Instructor")
	proto.RegisterType((*Book)(nil), "Book")
	proto.RegisterType((*Metadata)(nil), "Metadata")
	proto.RegisterType((*Registration)(nil), "Registration")
	proto.RegisterType((*Semester)(nil), "Semester")
	proto.RegisterEnum("Season", Season_name, Season_value)
}