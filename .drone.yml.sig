eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9nbwogIHBhdGg6IHNyYy91Y3QKCgpwaXBlbGluZToKICBjb3JlOgogICAgaW1hZ2U6IGdvbGFuZzoxLjcKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vZ28KICAgIGNvbW1hbmRzOgogICAgICAtIGNkIC9nby9zcmMvdWN0CiAgICAgIC0gZXhwb3J0IFBBVEg9JFBBVEg6JEdPUEFUSC9iaW4KICAgICAgLSB3Z2V0IC1xIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXN0ZXJtaW5kcy9nbGlkZS9yZWxlYXNlcy9kb3dubG9hZC92MC4xMi4xL2dsaWRlLXYwLjEyLjEtbGludXgtYW1kNjQudGFyLmd6CiAgICAgIC0gdGFyIC14emYgZ2xpZGUtdjAuMTIuMS1saW51eC1hbWQ2NC50YXIuZ3oKICAgICAgLSBtdiBsaW51eC1hbWQ2NC9nbGlkZSAvdXNyL2JpbgogICAgICAtIGdsaWRlIGluc3RhbGwKICAgICAgLSBleHBvcnQgUEFUSD0kUEFUSDokR09QQVRIL2JpbgogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L2VpbgogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L2hlcm1lcwogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L3NjcmFwZXJzL3J1dGdlcnMKICAgICAgLSBnbyBpbnN0YWxsIC12IHVjdC9zZXJ2ZXJzL3NwaWtlCgogIGltYWdlOgogICAgaW1hZ2U6IGxpYnJhcnkvZG9ja2VyOmRpbmQKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIC9nby9zcmMvdWN0CiAgICAgIC0gZG9ja2VyIGxvZ2luIC0tdXNlcm5hbWU9JERPQ0tFUl9VU0VSTkFNRSAtLXBhc3N3b3JkPSRET0NLRVJfUEFTU1dPUkQKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctZWluIC1mIERvY2tlcmZpbGUtZWluIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctc3Bpa2UgLWYgRG9ja2VyZmlsZS1zcGlrZSAuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLWhlcm1lcyAtZiBEb2NrZXJmaWxlLWhlcm1lcyAuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXJ1dGdlcnMtY20gLWYgRG9ja2VyZmlsZS1ydXRnZXJzLWNtIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctcnV0Z2Vycy1uYiAtZiBEb2NrZXJmaWxlLXJ1dGdlcnMtbmIgLgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1ydXRnZXJzLW5rIC1mIERvY2tlcmZpbGUtcnV0Z2Vycy1uayAuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLWZsdWVudGQgLWYgc3VwcG9ydC9mbHVlbnRkL0RvY2tlcmZpbGUgc3VwcG9ydC9mbHVlbnRkCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLWZsdWVudGQtZ2VuIC1mIHN1cHBvcnQvZmx1ZW50ZC9nZW4vRG9ja2VyZmlsZSBzdXBwb3J0L2ZsdWVudGQvZ2VuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLW5naW54IC1mIHN1cHBvcnQvbmdpbngvRG9ja2VyZmlsZSBzdXBwb3J0L25naW54CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLW5naW54LWdlbiAtZiBzdXBwb3J0L25naW54L2dlbi9Eb2NrZXJmaWxlIHN1cHBvcnQvbmdpbngvZ2VuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXBvc3RncmVzcWwgLWYgc3VwcG9ydC9wb3N0Z3Jlc3FsL0RvY2tlcmZpbGUgc3VwcG9ydC9wb3N0Z3Jlc3FsCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXRlbGVncmFmIC1mIHN1cHBvcnQvdGVsZWdyYWYvRG9ja2VyZmlsZSBzdXBwb3J0L3RlbGVncmFmCgogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLWVpbgogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXNwaWtlCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctaGVybWVzCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctcnV0Z2Vycy1jbQogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXJ1dGdlcnMtbmIKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1ydXRnZXJzLW5rCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctZmx1ZW50ZAogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLWZsdWVudGQtZ2VuCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctbmdpbngKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1uZ2lueC1nZW4KICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1wb3N0Z3Jlc3FsCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctdGVsZWdyYWYKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKCiAgc2xhY2s6CiAgICB3ZWJob29rOiBodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy9UMk1IQzRSQjUvQjJNS0Q0MzhTL0FpVm9zZXRxdXFjTktsTlBFTE9JVWNhaAogICAgY2hhbm5lbDogY2kKICAgIHVzZXJuYW1lOiBkcm9uZQ.HX0EEt6WAQlO3BbtR-I2X0EF2jiulWkgXfb12kiMDZA