eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9nbwogIHBhdGg6IHNyYy91Y3QKCgpwaXBlbGluZToKICBjb3JlOgogICAgaW1hZ2U6IGdvbGFuZzoxLjcKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vZ28KICAgIGNvbW1hbmRzOgogICAgICAtIGNkIC9nby9zcmMvdWN0CiAgICAgIC0gZXhwb3J0IFBBVEg9JFBBVEg6JEdPUEFUSC9iaW4KICAgICAgLSB3Z2V0IC1xIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXN0ZXJtaW5kcy9nbGlkZS9yZWxlYXNlcy9kb3dubG9hZC92MC4xMi4xL2dsaWRlLXYwLjEyLjEtbGludXgtYW1kNjQudGFyLmd6CiAgICAgIC0gdGFyIC14emYgZ2xpZGUtdjAuMTIuMS1saW51eC1hbWQ2NC50YXIuZ3oKICAgICAgLSBtdiBsaW51eC1hbWQ2NC9nbGlkZSAvdXNyL2JpbgogICAgICAtIGdsaWRlIGluc3RhbGwKICAgICAgLSBleHBvcnQgUEFUSD0kUEFUSDokR09QQVRIL2JpbgogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L2VpbgogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L2hlcm1lcwogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L3NjcmFwZXJzL3J1dGdlcnMKICAgICAgLSBnbyBpbnN0YWxsIC12IHVjdC9zZXJ2ZXJzL3NwaWtlCgogIGltYWdlOgogICAgaW1hZ2U6IGxpYnJhcnkvZG9ja2VyOjEuMTEuMi1kaW5kCiAgICBjb21tYW5kczoKICAgICAgLSBjZCAvZ28vc3JjL3VjdAogICAgICAtIGRvY2tlciBsb2dpbiAtLXVzZXJuYW1lPSRET0NLRVJfVVNFUk5BTUUgLS1wYXNzd29yZD0kRE9DS0VSX1BBU1NXT1JECiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLWVpbiAtZiBEb2NrZXJmaWxlLWVpbiAuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXNwaWtlIC1mIERvY2tlcmZpbGUtc3Bpa2UgLgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1oZXJtZXMgLWYgRG9ja2VyZmlsZS1oZXJtZXMgLgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1ydXRnZXJzLWNtIC1mIERvY2tlcmZpbGUtcnV0Z2Vycy1jbSAuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXJ1dGdlcnMtbmIgLWYgRG9ja2VyZmlsZS1ydXRnZXJzLW5iIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctcnV0Z2Vycy1uayAtZiBEb2NrZXJmaWxlLXJ1dGdlcnMtbmsgLgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1mbHVlbnRkIC1mIHN1cHBvcnQvZmx1ZW50ZC9Eb2NrZXJmaWxlIHN1cHBvcnQvZmx1ZW50ZAogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1mbHVlbnRkLWdlbiAtZiBzdXBwb3J0L2ZsdWVudGQvZ2VuL0RvY2tlcmZpbGUgc3VwcG9ydC9mbHVlbnRkL2dlbgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1uZ2lueCAtZiBzdXBwb3J0L25naW54L0RvY2tlcmZpbGUgc3VwcG9ydC9uZ2lueAogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1uZ2lueC1nZW4gLWYgc3VwcG9ydC9uZ2lueC9nZW4vRG9ja2VyZmlsZSBzdXBwb3J0L25naW54L2dlbgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1wb3N0Z3Jlc3FsIC1mIHN1cHBvcnQvcG9zdGdyZXNxbC9Eb2NrZXJmaWxlIHN1cHBvcnQvcG9zdGdyZXNxbAogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy10ZWxlZ3JhZiAtZiBzdXBwb3J0L3RlbGVncmFmL0RvY2tlcmZpbGUgc3VwcG9ydC90ZWxlZ3JhZgoKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1laW4KICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1zcGlrZQogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLWhlcm1lcwogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXJ1dGdlcnMtY20KICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1ydXRnZXJzLW5iCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctcnV0Z2Vycy1uawogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLWZsdWVudGQKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1mbHVlbnRkLWdlbgogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLW5naW54CiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctbmdpbngtZ2VuCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctcG9zdGdyZXNxbAogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXRlbGVncmFmCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCgogIHNsYWNrOgogICAgd2ViaG9vazogaHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDJNSEM0UkI1L0IyTUtENDM4Uy9BaVZvc2V0cXVxY05LbE5QRUxPSVVjYWgKICAgIGNoYW5uZWw6IGNpCiAgICB1c2VybmFtZTogZHJvbmU.BZT_WUDhAKBx1eL8ijKA5RZPtSCxH6DVPHkS1LPPBjA