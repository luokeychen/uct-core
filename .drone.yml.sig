eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9nbwogIHBhdGg6IHNyYy91Y3QKCgpwaXBlbGluZToKICBjb3JlOgogICAgaW1hZ2U6IGdvbGFuZzoxLjcKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vZ28KICAgIGNvbW1hbmRzOgogICAgICAtIGNkIC9nby9zcmMvdWN0CiAgICAgIC0gZXhwb3J0IFBBVEg9JFBBVEg6JEdPUEFUSC9iaW4KICAgICAgLSB3Z2V0IC1xIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXN0ZXJtaW5kcy9nbGlkZS9yZWxlYXNlcy9kb3dubG9hZC92MC4xMi4xL2dsaWRlLXYwLjEyLjEtbGludXgtYW1kNjQudGFyLmd6CiAgICAgIC0gdGFyIC14emYgZ2xpZGUtdjAuMTIuMS1saW51eC1hbWQ2NC50YXIuZ3oKICAgICAgLSBtdiBsaW51eC1hbWQ2NC9nbGlkZSAvdXNyL2JpbgogICAgICAtIGdsaWRlIGluc3RhbGwKICAgICAgLSBleHBvcnQgUEFUSD0kUEFUSDokR09QQVRIL2JpbgogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L2VpbgogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L2hlcm1lcwogICAgICAtIGdvIGluc3RhbGwgLXYgdWN0L3NjcmFwZXJzL3J1dGdlcnMKICAgICAgLSBnbyBpbnN0YWxsIC12IHVjdC9zZXJ2ZXJzL3NwaWtlCiAgaW1hZ2U6CiAgICBpbWFnZTogbGlicmFyeS9kb2NrZXI6ZGluZAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2dvL3NyYy91Y3QKICAgICAgLSBkb2NrZXIgbG9naW4gLS11c2VybmFtZT0kRE9DS0VSX1VTRVJOQU1FIC0tcGFzc3dvcmQ9JERPQ0tFUl9QQVNTV09SRAogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6ZWluIC1mIERvY2tlcmZpbGUtZWluIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnNwaWtlIC1mIERvY2tlcmZpbGUtc3Bpa2UgLgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6aGVybWVzIC1mIERvY2tlcmZpbGUtaGVybWVzIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnJ1dGdlcnMtY20gLWYgRG9ja2VyZmlsZS1ydXRnZXJzLWNtIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnJ1dGdlcnMtbmIgLWYgRG9ja2VyZmlsZS1ydXRnZXJzLW5iIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnJ1dGdlcnMtbmsgLWYgRG9ja2VyZmlsZS1ydXRnZXJzLW5rIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOmZsdWVudGQgLWYgc3VwcG9ydC9mbHVlbnRkL0RvY2tlcmZpbGUgc3VwcG9ydC9mbHVlbnRkCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpmbHVlbnRkLWdlbiAtZiBzdXBwb3J0L2ZsdWVudGQvZ2VuL0RvY2tlcmZpbGUgc3VwcG9ydC9mbHVlbnRkL2dlbgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6bmdpbnggLWYgc3VwcG9ydC9uZ2lueC9Eb2NrZXJmaWxlIHN1cHBvcnQvbmdpbngKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOm5naW54LWdlbiAtZiBzdXBwb3J0L25naW54L2dlbi9Eb2NrZXJmaWxlIHN1cHBvcnQvbmdpbngvZ2VuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpwb3N0Z3Jlc3FsIC1mIHN1cHBvcnQvcG9zdGdyZXNxbC9Eb2NrZXJmaWxlIHN1cHBvcnQvcG9zdGdyZXNxbAogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6dGVsZWdyYWYgLWYgc3VwcG9ydC90ZWxlZ3JhZi9Eb2NrZXJmaWxlIHN1cHBvcnQvdGVsZWdyYWYKCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOmVpbgogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzcGlrZQogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpoZXJtZXMKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6cnV0Z2Vycy1jbQogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpydXRnZXJzLW5iCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnJ1dGdlcnMtbmsKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6Zmx1ZW50ZAogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpmbHVlbnRkLWdlbgogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpuZ2lueAogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpuZ2lueC1nZW4KICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6cG9zdGdyZXNxbAogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTp0ZWxlZ3JhZgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgd2hlbjoKICAgICAgICBicmFuY2g6IG1hc3RlcgoKICBpbWFnZToKICAgIGltYWdlOiBsaWJyYXJ5L2RvY2tlcjpkaW5kCiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLS11c2VybmFtZT0kRE9DS0VSX1VTRVJOQU1FIC0tcGFzc3dvcmQ9JERPQ0tFUl9QQVNTV09SRAogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1laW4gLWYgRG9ja2VyZmlsZS1laW4gLgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1zcGlrZSAtZiBEb2NrZXJmaWxlLXNwaWtlIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctaGVybWVzIC1mIERvY2tlcmZpbGUtaGVybWVzIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctcnV0Z2Vycy1jbSAtZiBEb2NrZXJmaWxlLXJ1dGdlcnMtY20gLgogICAgICAtIGRvY2tlciBidWlsZCAtdCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1ydXRnZXJzLW5iIC1mIERvY2tlcmZpbGUtcnV0Z2Vycy1uYiAuCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXJ1dGdlcnMtbmsgLWYgRG9ja2VyZmlsZS1ydXRnZXJzLW5rIC4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctZmx1ZW50ZCAtZiBzdXBwb3J0L2ZsdWVudGQvRG9ja2VyZmlsZSBzdXBwb3J0L2ZsdWVudGQKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctZmx1ZW50ZC1nZW4gLWYgc3VwcG9ydC9mbHVlbnRkL2dlbi9Eb2NrZXJmaWxlIHN1cHBvcnQvZmx1ZW50ZC9nZW4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctbmdpbnggLWYgc3VwcG9ydC9uZ2lueC9Eb2NrZXJmaWxlIHN1cHBvcnQvbmdpbngKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctbmdpbngtZ2VuIC1mIHN1cHBvcnQvbmdpbngvZ2VuL0RvY2tlcmZpbGUgc3VwcG9ydC9uZ2lueC9nZW4KICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctcG9zdGdyZXNxbCAtZiBzdXBwb3J0L3Bvc3RncmVzcWwvRG9ja2VyZmlsZSBzdXBwb3J0L3Bvc3RncmVzcWwKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctdGVsZWdyYWYgLWYgc3VwcG9ydC90ZWxlZ3JhZi9Eb2NrZXJmaWxlIHN1cHBvcnQvdGVsZWdyYWYKCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctZWluCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctc3Bpa2UKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1oZXJtZXMKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1ydXRnZXJzLWNtCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctcnV0Z2Vycy1uYgogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXJ1dGdlcnMtbmsKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1mbHVlbnRkCiAgICAgIC0gZG9ja2VyIHB1c2ggdGV2amVmL3VjdC1jb3JlOnN0YWdpbmctZmx1ZW50ZC1nZW4KICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy1uZ2lueAogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLW5naW54LWdlbgogICAgICAtIGRvY2tlciBwdXNoIHRldmplZi91Y3QtY29yZTpzdGFnaW5nLXBvc3RncmVzcWwKICAgICAgLSBkb2NrZXIgcHVzaCB0ZXZqZWYvdWN0LWNvcmU6c3RhZ2luZy10ZWxlZ3JhZgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgd2hlbjoKICAgICAgICBicmFuY2g6IHN0YWdpbmcKCiAgc2xhY2s6CiAgICB3ZWJob29rOiBodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy9UMk1IQzRSQjUvQjJNS0Q0MzhTL0FpVm9zZXRxdXFjTktsTlBFTE9JVWNhaAogICAgY2hhbm5lbDogY2kKICAgIHVzZXJuYW1lOiBkcm9uZQ.qvP_6dQRpQuWHxpRFJrk625pysY4T-7j8HnX_UXvMo4